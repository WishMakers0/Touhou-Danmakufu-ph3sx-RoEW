ALL ARGUMENTS ARE REAL NUMBERS UNLESS STATED OTHERWISE

----------------------------------------------> [Base Script] <----------------------------------------------

	--------------------------------> Trigonometry and Angular Maths <--------------------------------

	cossin
		Arguments:
			1) angle
		Returns:
			(real[2]) [cos(angle), sin(angle)]
		Description:
			sincos() but with its elements reversed. Ideal for XY coordinate arrays.
			cossin(n) is equivalent to sincos(-n + 90).

	rcossin
		Arguments:
			1) angle (radians)
		Returns:
			(real[2]) result
		Description:
			cossin() for radians input.
			rcossin(n) is equivalent to rsincos(-n + pi / 2).
	
		--------------------------------> Interpolation <--------------------------------
	
	Interpolate_X
		Arguments:
			1) a
			2) b
			3) x
			4) (const) interpolation mode
		Returns:
			IF a, b are not arrays
				(real) result
			ELSE
				(real[length(a)]) result array
		Description:
			Returns the result of interpolation between a and b, using x as the interpolation value.
			
			Available interpolation modes:
				LERP_LINEAR:
					Linear interpolation.
				LERP_SMOOTH:
					Smooth interpolation.
				LERP_SMOOTHER:
					Smoother interpolation.
				LERP_ACCELERATE:
					Accelerating interpolation.
				LERP_DECELERATE:
					Decelerating interpolation.
				
			When interpolating between two arrays, they must be of the same size.
			
	Interpolate_Bytewise
		Arguments:
			1) (int) a
			2) (int) b
			3) x
		Returns:
			(int) result
			
		Description:
			Returns the result of interpolation between unsigned 32-bit integers a and b, with each byte being interpolated independently, using x as the interpolation value.
			Ideal for interpolating colors by their hexadecimal values.
			Interpolation method is linear.
			
	Interpolate_Bytewise
		Arguments:
			1) (int) a
			2) (int) b
			3) x
			4) (const) interpolation mode
		Returns:
			(int) result
			
		Description:
			Overloaded with 4 arguments.
			Returns the result of interpolation between unsigned 32-bit integers a and b, with each byte being interpolated independently, using x as the interpolation value.
			
			Available interpolation modes:
				LERP_LINEAR:
					Linear interpolation.
				LERP_SMOOTH:
					Smooth interpolation.
				LERP_SMOOTHER:
					Smoother interpolation.
				LERP_ACCELERATE:
					Accelerating interpolation.
				LERP_DECELERATE:
					Decelerating interpolation.
					
	Interpolate_Array
		Arguments:
			1) (array) arr
			2) x
		Returns:
			(int) result
			
		Description:
			Returns the result of interpolation between the elements of an array, with each [0, 1) segment resulting in interpolation between different adjacent elements.
			For example, an x value of 2.5 will interpolate between the elements indexed 2 and 3.
			If the x value is greater than the highest index in the array, this function will interpolate between the last element and the first one.
			Interpolation method is linear.
			
	Interpolate_Array
		Arguments:
			1) (array) arr
			2) x
			3) (const) interpolation mode
		Returns:
			(int) result
			
		Description:
			Overloaded with 3 arguments.
			Returns the result of interpolation between the elements of an array, with each [0, 1) segment resulting in interpolation between different adjacent elements.
			
			Available interpolation modes:
				LERP_LINEAR:
					Linear interpolation.
				LERP_SMOOTH:
					Smooth interpolation.
				LERP_SMOOTHER:
					Smoother interpolation.
				LERP_ACCELERATE:
					Accelerating interpolation.
				LERP_DECELERATE:
					Decelerating interpolation.
			
--------------------------------> Render Object Functions <--------------------------------
	
	[---------------------------> Color & Alpha <---------------------------]
		
		ObjRender_GetColorHex
			Arguments:
				1) object ID
			Returns:
				(int) color
			Description:
				Returns the color's XRGB hexadecimal value.
				
--------------------------------> Primitive Object Functions <--------------------------------
			
	ObjPrim_GetVertexColorHex
		Arguments:
			1) object ID
			2) vertex index
		Returns:
			(int) color
		Description:
			Returns the vertex color in XRGB hexadecimal format.
				
----------------------------------------------> [Stage Script] <----------------------------------------------

	--------------------------------> Player Functions <--------------------------------
	
	KillPlayer
		Description:
			Change.
			Now accessible to all stage-level scripts. (Why, Natashi?)